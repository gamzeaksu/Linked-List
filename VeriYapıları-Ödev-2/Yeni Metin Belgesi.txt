

void sil(int a) 
{ 
    n *curr = head, *prev_1 = NULL; 
    printf("\n%d ",a);
    printf("\n%d ",playing->data);

    while (curr->data != a) { //aranması
    
      	if(curr->next == playing){
      		printf("Cannot Remove The Playing Song");
      		return;
		}
        prev_1 = curr; 
        curr = curr->next; 
    } 
  
    // head node silinmeye çalışılıyorsa
    if (curr->next == head && prev_1 == NULL) { 
    
    	if(curr->next == playing){
      		printf("Cannot Remove The Playing Song");
      		return;
		}
		else
		{
			printf("head");
			(head) = NULL; 
	        free(curr); 
	        return; 
		}
        
    } 
  
    // If list has more than one node, 
    // head node silinmeye çalışıyorsa
    if (curr == head) { 
    
	    if(curr->next == playing){
      		printf("Cannot Remove The Playing Song");
      		return;
		}
        // Move prev_1 to last node 
        prev_1 = (head)->prev; 
        // Move start ahead 
        head = (head)->next; 
  	
        // Adjust the pointers of prev_1 and start node 
        prev_1->next = head; 
        (head)->prev = prev_1; 
        free(curr); 
    } 
  
    // check if it is the last node 
    else if (curr->next == head) { 
    
        if(curr->next == playing){
      		printf("Cannot Remove The Playing Song");
      		return;
		}
        prev_1->next = head; 
        (head)->prev = prev_1; 
        free(curr); 
    } 
    else { 
        // create new pointer, points to next of curr node 
        n * temp = curr->next; 
        // Adjust the pointers of prev_1 and temp node 
        prev_1->next = temp; 
        temp->prev = prev_1; 
        free(curr); 
    } 
} 